// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  points        Int         @default(0)
  level         Int         @default(1)
  userBadges    UserBadge[]
  habits        Habit[]
  categories    Category[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  color       String   @default("#89AC46") // Couleur par défaut
  description String?
  icon        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  habits      Habit[]
}

model Habit {
  id          String         @id @default(cuid())
  name        String
  description String?
  frequency   String         @default("DAILY") // DAILY, WEEKLY, MONTHLY
  categoryId  String?        // Optionnel pour permettre des habitudes sans catégorie
  category    Category?      @relation(fields: [categoryId], references: [id])
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  tracking    HabitTracking[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
}

model HabitTracking {
  id        String   @id @default(cuid())
  habit     Habit    @relation(fields: [habitId], references: [id])
  habitId   String
  completed Boolean  @default(false)
  date      DateTime @default(now())
  notes     String?
  
  @@unique([habitId, date])
  @@index([date])
}

model Badge {
  id            String      @id @default(cuid())
  name          String
  description   String
  imageUrl      String?
  pointsNeeded  Int
  category      BadgeCategory
  createdAt     DateTime    @default(now())
  userBadges    UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  badge     Badge    @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
}

enum BadgeCategory {
  BEGINNER
  INTERMEDIATE
  EXPERT
  MASTER
  SPECIAL
}
